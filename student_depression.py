# -*- coding: utf-8 -*-
"""Student Depression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xwYo44g3VoubXrvAOgIcm7Oh-UfF85qX

**Mount Drive**
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""**Import Library**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
#%matplotlib inline
import warnings
warnings.filterwarnings('ignore')
from sklearn.tree import DecisionTreeClassifier
import seaborn as sns
pd.set_option('display.max_rows', None)

"""##**Read & Show Dataset**"""

depressionDataset = pd.read_csv('gdrive/My Drive/Student Depression/Depression Prediction Dataset.csv')

depressionDataset.head()

depressionDataset.describe()

"""##**Mapping**"""

depression_Dataset = [depressionDataset]

#Age Column
for dataset in depression_Dataset:
  dataset.loc[dataset['AGE']<=15, 'AGE'] = 0
  dataset.loc[(dataset['AGE']>15) & (dataset['AGE']<=20), 'AGE'] = 1
  dataset.loc[(dataset['AGE']>20) & (dataset['AGE']<=25), 'AGE'] = 2
  dataset.loc[dataset['AGE'] >25, 'AGE'] = 3

# Gender Column
gender_maping = {"Male":1,"Female":0}
for dataset in depression_Dataset:
  dataset['GENDER'] = dataset['GENDER'].map(gender_maping)

# Financial Problem Column
FFP_maping = {"No Financial Problem":0,"Low Financial Problem":1, "Serious FInancial Problem":2}
for dataset in depression_Dataset:
  dataset['FFP'] = dataset['FFP'].map(FFP_maping)

# Function for All Yes/No
def YesNoAns(column):
    mapping = {"No":0,"Yes":1}
    for dataset in depression_Dataset:
      dataset[column] = dataset[column].map(mapping)

YesNoAns('PMPCOVID-19')
YesNoAns('FPPS')
YesNoAns('UPSET')
YesNoAns('HISSUE')
YesNoAns('ALCDRUINV')
YesNoAns('ANGER')
YesNoAns('SL6-8')
YesNoAns('SUICIDAL')
YesNoAns('WORRIEDF')
YesNoAns('HARASS')
YesNoAns('LOIW')
YesNoAns('INDES')
YesNoAns('RIDICULED')
YesNoAns('WORRIEDP')
YesNoAns('INSOMNIAC')

#Function for Spending Time
def SpendTime(column):
    mapping = {"Less then 1 hour":0,"2-4 hour":1, "More then 5 hour":2}
    for dataset in depression_Dataset:
      dataset[column] = dataset[column].map(mapping)

SpendTime('TISM')
SpendTime('TWF')
SpendTime('NIGHTSCREENTIME')

depressionDataset.head()

"""##**Devide and Train Test**

**Dividing Dataset**
"""

X = depressionDataset[['AGE','GENDER','PMPCOVID-19','FFP','FPPS','UPSET','HISSUE','ALCDRUINV','ANGER','SL6-8','SUICIDAL','TISM','TWF','WORRIEDF','HARASS','LOIW','INDES','RIDICULED','NIGHTSCREENTIME','WORRIEDP','INSOMNIAC']]
y = depressionDataset[['DEPRESSED']]

"""**Train and Test**"""

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=123)

"""##**Apply Classifiers**

**Logistic Regression**
"""

logRegression=LogisticRegression()
logRegression.fit(X_train,y_train)

y_predictionLogistic=logRegression.predict(X_test)

print("Accuracy: ",metrics.accuracy_score(y_test, y_predictionLogistic))
print("\nConfusion Matrix:")
print(metrics.confusion_matrix(y_test,y_predictionLogistic))
print("\nReport for Logistic: ")
print(metrics.classification_report(y_test,y_predictionLogistic))

"""**Multi-layer Perceptron(MLP)**"""

from sklearn.neural_network import MLPClassifier
MLPClassification=MLPClassifier(random_state=0)
MLPClassification.fit(X_train,y_train)
y_predictionMLP=MLPClassification.predict(X_test)

print("Accuracy",metrics.accuracy_score(y_test, y_predictionMLP))

print("\nConfusion Matrix:")
print(metrics.confusion_matrix(y_test,y_predictionMLP))

print("\nReport for MLP: ")
print(metrics.classification_report(y_test,y_predictionMLP))

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier

RndmForestClassification=RandomForestClassifier()
RndmForestClassification.fit(X_train,y_train)
y_predictionRndmForest=RndmForestClassification.predict(X_test)
print("Accuracy: ")
print(metrics.accuracy_score(y_test, y_predictionRndmForest))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_predictionRndmForest))

print("\nReport for Random Forest: ")
print(metrics.classification_report(y_test,y_predictionRndmForest))

"""**Support Vector Machine(SVM)**"""

from sklearn import svm

svmClassification = svm.SVC(kernel='linear')
svmClassification.fit(X_train, y_train)
y_pred = svmClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for SVM: ")
print(metrics.classification_report(y_test,y_pred))

"""**Multinomial Naive Bayes**"""

from sklearn.naive_bayes import MultinomialNB

mnbClassification = MultinomialNB()
mnbClassification.fit(X_train, y_train)
y_pred = mnbClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for Multinomial Naive Bayes: ")
print(metrics.classification_report(y_test,y_pred))

"""**Gaussian Naive Bayes**"""

from sklearn.naive_bayes import GaussianNB

gaussianClassification = GaussianNB()
gaussianClassification.fit(X_train, y_train)
y_pred = gaussianClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for Gaussian Naive Bayes: ")
print(metrics.classification_report(y_test,y_pred))

"""**Gradient Boosting**"""

from sklearn.ensemble import GradientBoostingClassifier

gradientClassification = GradientBoostingClassifier(random_state=0,n_estimators=50)
gradientClassification.fit(X_train, y_train)
y_pred = gradientClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for Gradient Boosting: ")
print(metrics.classification_report(y_test,y_pred))

"""**AdaBoost**"""

from sklearn.ensemble import AdaBoostClassifier

adaBoostClassification = AdaBoostClassifier(random_state=0,n_estimators=100)
adaBoostClassification.fit(X_train, y_train)
y_pred = adaBoostClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for AdaBoost: ")
print(metrics.classification_report(y_test,y_pred))

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier

decisionTreeClassification = DecisionTreeClassifier(random_state=10)
decisionTreeClassification.fit(X_train, y_train)
y_pred = decisionTreeClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for Decision Tree: ")
print(metrics.classification_report(y_test,y_pred))

"""**k-Nearest Neighbours(KNN)**"""

from sklearn.neighbors import KNeighborsClassifier

knnClassification = KNeighborsClassifier()
knnClassification.fit(X_train, y_train)
y_pred = knnClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for KNN: ")
print(metrics.classification_report(y_test,y_pred))

"""**Quadratic Discriminant Analysis(QDA)**"""

from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis

qdaClassification = QuadraticDiscriminantAnalysis()
qdaClassification.fit(X_train, y_train)
y_pred = qdaClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for QDA: ")
print(metrics.classification_report(y_test,y_pred))

"""**Extra Tree**"""

from sklearn.ensemble import ExtraTreesClassifier

extraTreeClassification = ExtraTreesClassifier(random_state=0,n_estimators=100)
extraTreeClassification.fit(X_train, y_train)
y_pred = extraTreeClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for Extra Tree: ")
print(metrics.classification_report(y_test,y_pred))

"""**Bagging**"""

from sklearn.ensemble import BaggingClassifier
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
pipeline = make_pipeline(StandardScaler(),LogisticRegression(random_state=123))
baggingClassification = BaggingClassifier(base_estimator=pipeline)
baggingClassification.fit(X_train, y_train)
y_pred = baggingClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for Bagging: ")
print(metrics.classification_report(y_test,y_pred))

"""**Stacking**"""

from sklearn.ensemble import StackingClassifier
from sklearn.svm import LinearSVC

estimators = [('rf', RandomForestClassifier(n_estimators=10, random_state=42)),('svr', make_pipeline(StandardScaler(),LinearSVC(random_state=42)))]
stackingClassification = StackingClassifier(estimators)
stackingClassification.fit(X_train, y_train)
y_pred = stackingClassification.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("\nConfusion Matrix")
print(metrics.confusion_matrix(y_test,y_pred))
print("\nReport for Stacking: ")
print(metrics.classification_report(y_test,y_pred))

depressionDataset.head()

"""##**Insomnic**"""

insomniaData = depressionDataset
insomniaData.head()

insomnicDF = depressionDataset
insomnicDF['INSOMNIAC'] = insomnicDF['INSOMNIAC'].replace([0],'No')
insomnicDF['INSOMNIAC'] = insomnicDF['INSOMNIAC'].replace([1],'Yes')

fig = plt.figure(figsize=(7,5))
sns.set_style('darkgrid')
sns.countplot(depressionDataset['DEPRESSED'], hue=depressionDataset['INSOMNIAC'])
plt.xlabel('DEPRESSED', weight='bold', fontsize=12)
plt.ylabel('Frequency', weight='bold', fontsize=12)
plt.xticks(weight='bold')
plt.yticks(weight='bold')
plt.tight_layout()
plt.title('Insomnia in Depressed People', weight='bold', fontsize=14)
plt.legend(title='Insomnia')
plt.show()

"""##**Visualization**"""

df = depressionDataset
df['DEPRESSED'] = df['DEPRESSED'].replace([0],'No')
df['DEPRESSED'] = df['DEPRESSED'].replace([1],'Yes')

df['GENDER'] = df['GENDER'].replace([0],'Female')
df['GENDER'] = df['GENDER'].replace([1],'Male')

fig = plt.figure(figsize=(15,5))
sns.set_style('darkgrid')
fig.add_subplot(122)
sns.kdeplot(depressionDataset['AGE'], hue=depressionDataset['GENDER'], multiple="stack")
plt.xlabel('Age', weight='bold', fontsize=12)
plt.ylabel('Density', weight='bold', fontsize=12)
plt.xticks(weight='bold')
plt.yticks(weight='bold')
plt.title('(B)', weight='bold', fontsize=14)

# ''' Detection '''
# # IQR
# Q1 = np.percentile(df['AGE'], 25, interpolation='midpoint')
# Q3 = np.percentile(df['AGE'], 75, interpolation='midpoint')
# IQR = Q3 - Q1
# print("Old Shape: ", df.shape)


# # Upper bound
# upper = np.where(df['AGE'] >= (Q3 + 1.5 * IQR))
# # Lower bound
# lower = np.where(df['AGE'] <= (Q1 - 1.5 * IQR))

# ''' Removing the Outliers '''
# df1.drop(upper[0], inplace=True)
# df1.drop(lower[0], inplace=True)

# print("New Shape: ", df1.shape)

fig = plt.figure(figsize=(7,5))
fig.add_subplot(121)
sns.set_style('darkgrid')
sns.boxplot(y=depressionDataset['AGE'])
fig.add_subplot(122)
sns.set_style('darkgrid')
sns.boxplot(y=df['AGE'])
plt.tight_layout()
plt.show()

fig = plt.figure(figsize=(10,5))
sns.set_style('darkgrid')
sns.kdeplot(depressionDataset['AGE'], hue=depressionDataset['DEPRESSED'], multiple="stack")
plt.xlabel('Age', weight='bold', fontsize=12)
plt.ylabel('Density', weight='bold', fontsize=12)
plt.xticks(weight='bold')
plt.yticks(weight='bold')
plt.tight_layout()
plt.show()

fig = plt.figure(figsize=(7,5))
sns.set_style('darkgrid')
sns.countplot(depressionDataset['GENDER'], hue=depressionDataset['DEPRESSED'])
plt.xlabel('Gender', weight='bold', fontsize=12)
plt.ylabel('Frequency', weight='bold', fontsize=12)
plt.xticks(weight='bold')
plt.yticks(weight='bold')
plt.tight_layout()
plt.show()

fig = plt.figure(figsize=(10,5))
sns.set_style('darkgrid')
sns.countplot(depressionDataset['AGE'], hue=depressionDataset['DEPRESSED'])
plt.xlabel('Age', weight='bold', fontsize=12)
plt.ylabel('Frequency', weight='bold', fontsize=12)
plt.xticks(weight='bold')
plt.yticks(weight='bold')
plt.legend(loc='upper right')
plt.tight_layout()
plt.show()